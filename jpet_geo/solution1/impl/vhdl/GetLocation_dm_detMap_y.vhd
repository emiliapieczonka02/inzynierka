-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity GetLocation_dm_detMap_y_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 96
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of GetLocation_dm_detMap_y_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000000000000000000000000000", 
    1 => "01000001000010111111001110110110", 
    2 => "00000000000000000000000000000000", 
    3 => "01000001000010111111001110110110", 
    4 => "00000000000000000000000000000000", 
    5 => "01000001000010111111001110110110", 
    6 => "00000000000000000000000000000000", 
    7 => "01000001000010111111001110110110", 
    8 => "00000000000000000000000000000000", 
    9 => "01000001000010111111001110110110", 
    10 => "00000000000000000000000000000000", 
    11 => "01000001000010111111001110110110", 
    12 => "00000000000000000000000000000000", 
    13 => "01000001000010111111001110110110", 
    14 => "00000000000000000000000000000000", 
    15 => "01000001000010111111001110110110", 
    16 => "00000000000000000000000000000000", 
    17 => "01000001000010111111001110110110", 
    18 => "00000000000000000000000000000000", 
    19 => "01000001000010111111001110110110", 
    20 => "00000000000000000000000000000000", 
    21 => "01000001000010111111001110110110", 
    22 => "00000000000000000000000000000000", 
    23 => "01000001000010111111001110110110", 
    24 => "00000000000000000000000000000000", 
    25 => "01000001000010111111001110110110", 
    26 => "00000000000000000000000000000000", 
    27 => "01000001000010111111001110110110", 
    28 => "00000000000000000000000000000000", 
    29 => "01000001000010111111001110110110", 
    30 => "00000000000000000000000000000000", 
    31 => "01000001000010111111001110110110", 
    32 => "00000000000000000000000000000000", 
    33 => "01000010110110010111111001110111", 
    34 => "01000010110010000000000000000000", 
    35 => "01000010110110010111111001110111", 
    36 => "01000010110010000000000000000000", 
    37 => "01000010110110010111111001110111", 
    38 => "01000010110010000000000000000000", 
    39 => "01000010110110010111111001110111", 
    40 => "01000010110010000000000000000000", 
    41 => "01000010110110010111111001110111", 
    42 => "01000010110010000000000000000000", 
    43 => "01000010110110010111111001110111", 
    44 => "01000010110010000000000000000000", 
    45 => "01000010110110010111111001110111", 
    46 => "01000010110010000000000000000000", 
    47 => "01000010110110010111111001110111", 
    48 => "01000010110010000000000000000000", 
    49 => "01000010110110010111111001110111", 
    50 => "01000010110010000000000000000000", 
    51 => "01000010110110010111111001110111", 
    52 => "01000010110010000000000000000000", 
    53 => "01000010110110010111111001110111", 
    54 => "01000010110010000000000000000000", 
    55 => "01000010110110010111111001110111", 
    56 => "01000010110010000000000000000000", 
    57 => "01000010110110010111111001110111", 
    58 => "01000010110010000000000000000000", 
    59 => "01000010110110010111111001110111", 
    60 => "01000010110010000000000000000000", 
    61 => "01000010110110010111111001110111", 
    62 => "01000010110010000000000000000000", 
    63 => "01000010110110010111111001110111", 
    64 => "01000010110010000000000000000000", 
    65 => "01000010110110010111111001110111", 
    66 => "01000010110010000000000000000000", 
    67 => "01000010110110010111111001110111", 
    68 => "01000010110010000000000000000000", 
    69 => "01000010110110010111111001110111", 
    70 => "01000010110010000000000000000000", 
    71 => "01000010110110010111111001110111", 
    72 => "01000010110010000000000000000000", 
    73 => "01000010110110010111111001110111", 
    74 => "01000010110010000000000000000000", 
    75 => "01000010110110010111111001110111", 
    76 => "01000010110010000000000000000000", 
    77 => "01000010110110010111111001110111", 
    78 => "01000010110010000000000000000000", 
    79 => "01000010110110010111111001110111", 
    80 => "01000010110010000000000000000000", 
    81 => "01000010110110010111111001110111", 
    82 => "01000010110010000000000000000000", 
    83 => "01000010110110010111111001110111", 
    84 => "01000010110010000000000000000000", 
    85 => "01000010110110010111111001110111", 
    86 => "01000010110010000000000000000000", 
    87 => "01000010110110010111111001110111", 
    88 => "01000010110010000000000000000000", 
    89 => "01000010110110010111111001110111", 
    90 => "01000010110010000000000000000000", 
    91 => "01000010110110010111111001110111", 
    92 => "01000010110010000000000000000000", 
    93 => "01000010110110010111111001110111", 
    94 => "01000010110010000000000000000000", 
    95 => "01000010110110010111111001110111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity GetLocation_dm_detMap_y is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 96;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of GetLocation_dm_detMap_y is
    component GetLocation_dm_detMap_y_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    GetLocation_dm_detMap_y_rom_U :  component GetLocation_dm_detMap_y_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


