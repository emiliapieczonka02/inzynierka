// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="GetLocation,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=11,HLS_SYN_LUT=15}" *)

module GetLocation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result_x,
        agg_result_x_ap_vld,
        agg_result_y,
        agg_result_y_ap_vld,
        agg_result_module,
        agg_result_module_ap_vld,
        tdc_channel
);

parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] agg_result_x;
output   agg_result_x_ap_vld;
output  [31:0] agg_result_y;
output   agg_result_y_ap_vld;
output  [15:0] agg_result_module;
output   agg_result_module_ap_vld;
input  [15:0] tdc_channel;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg agg_result_x_ap_vld;
reg agg_result_y_ap_vld;
reg agg_result_module_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_17;
wire   [6:0] dm_detMap_x_address0;
reg    dm_detMap_x_ce0;
wire   [7:0] dm_detMap_x_q0;
wire   [6:0] dm_detMap_y_address0;
reg    dm_detMap_y_ce0;
wire   [31:0] dm_detMap_y_q0;
wire   [6:0] dm_detMap_module_address0;
reg    dm_detMap_module_ce0;
wire   [0:0] dm_detMap_module_q0;
wire  signed [63:0] tmp_fu_92_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_69;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
end

GetLocation_dm_detMap_x #(
    .DataWidth( 8 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
dm_detMap_x_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dm_detMap_x_address0),
    .ce0(dm_detMap_x_ce0),
    .q0(dm_detMap_x_q0)
);

GetLocation_dm_detMap_y #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
dm_detMap_y_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dm_detMap_y_address0),
    .ce0(dm_detMap_y_ce0),
    .q0(dm_detMap_y_q0)
);

GetLocation_dm_detMap_module #(
    .DataWidth( 1 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
dm_detMap_module_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dm_detMap_module_address0),
    .ce0(dm_detMap_module_ce0),
    .q0(dm_detMap_module_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        agg_result_module_ap_vld = 1'b1;
    end else begin
        agg_result_module_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        agg_result_x_ap_vld = 1'b1;
    end else begin
        agg_result_x_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        agg_result_y_ap_vld = 1'b1;
    end else begin
        agg_result_y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_17) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_69) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        dm_detMap_module_ce0 = 1'b1;
    end else begin
        dm_detMap_module_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        dm_detMap_x_ce0 = 1'b1;
    end else begin
        dm_detMap_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        dm_detMap_y_ce0 = 1'b1;
    end else begin
        dm_detMap_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result_module = dm_detMap_module_q0;

assign agg_result_x = dm_detMap_x_q0;

assign agg_result_y = dm_detMap_y_q0;

always @ (*) begin
    ap_sig_17 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_69 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign dm_detMap_module_address0 = tmp_fu_92_p1;

assign dm_detMap_x_address0 = tmp_fu_92_p1;

assign dm_detMap_y_address0 = tmp_fu_92_p1;

assign tmp_fu_92_p1 = $signed(tdc_channel);

endmodule //GetLocation
