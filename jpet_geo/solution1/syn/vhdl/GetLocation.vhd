-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GetLocation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    agg_result_x : OUT STD_LOGIC_VECTOR (15 downto 0);
    agg_result_x_ap_vld : OUT STD_LOGIC;
    agg_result_y : OUT STD_LOGIC_VECTOR (31 downto 0);
    agg_result_y_ap_vld : OUT STD_LOGIC;
    agg_result_module : OUT STD_LOGIC_VECTOR (15 downto 0);
    agg_result_module_ap_vld : OUT STD_LOGIC;
    tdc_channel : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of GetLocation is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "GetLocation,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=11,HLS_SYN_LUT=15}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_17 : BOOLEAN;
    signal dm_detMap_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dm_detMap_x_ce0 : STD_LOGIC;
    signal dm_detMap_x_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dm_detMap_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dm_detMap_y_ce0 : STD_LOGIC;
    signal dm_detMap_y_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dm_detMap_module_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dm_detMap_module_ce0 : STD_LOGIC;
    signal dm_detMap_module_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_92_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_69 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component GetLocation_dm_detMap_x IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component GetLocation_dm_detMap_y IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component GetLocation_dm_detMap_module IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dm_detMap_x_U : component GetLocation_dm_detMap_x
    generic map (
        DataWidth => 8,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dm_detMap_x_address0,
        ce0 => dm_detMap_x_ce0,
        q0 => dm_detMap_x_q0);

    dm_detMap_y_U : component GetLocation_dm_detMap_y
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dm_detMap_y_address0,
        ce0 => dm_detMap_y_ce0,
        q0 => dm_detMap_y_q0);

    dm_detMap_module_U : component GetLocation_dm_detMap_module
    generic map (
        DataWidth => 1,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dm_detMap_module_address0,
        ce0 => dm_detMap_module_ce0,
        q0 => dm_detMap_module_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    agg_result_module <= std_logic_vector(resize(unsigned(dm_detMap_module_q0),16));

    agg_result_module_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            agg_result_module_ap_vld <= ap_const_logic_1;
        else 
            agg_result_module_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_x <= std_logic_vector(resize(unsigned(dm_detMap_x_q0),16));

    agg_result_x_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            agg_result_x_ap_vld <= ap_const_logic_1;
        else 
            agg_result_x_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    agg_result_y <= dm_detMap_y_q0;

    agg_result_y_ap_vld_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            agg_result_y_ap_vld <= ap_const_logic_1;
        else 
            agg_result_y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_17_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_17 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_69 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_17)
    begin
        if (ap_sig_17) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_69)
    begin
        if (ap_sig_69) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;

    dm_detMap_module_address0 <= tmp_fu_92_p1(7 - 1 downto 0);

    dm_detMap_module_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            dm_detMap_module_ce0 <= ap_const_logic_1;
        else 
            dm_detMap_module_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dm_detMap_x_address0 <= tmp_fu_92_p1(7 - 1 downto 0);

    dm_detMap_x_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            dm_detMap_x_ce0 <= ap_const_logic_1;
        else 
            dm_detMap_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dm_detMap_y_address0 <= tmp_fu_92_p1(7 - 1 downto 0);

    dm_detMap_y_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
            dm_detMap_y_ce0 <= ap_const_logic_1;
        else 
            dm_detMap_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_fu_92_p1 <= std_logic_vector(resize(signed(tdc_channel),64));

end behav;
