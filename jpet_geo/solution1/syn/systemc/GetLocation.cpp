// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "GetLocation.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic GetLocation::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic GetLocation::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> GetLocation::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> GetLocation::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> GetLocation::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> GetLocation::ap_const_lv1_1 = "1";
const sc_lv<32> GetLocation::ap_const_lv32_1 = "1";

GetLocation::GetLocation(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dm_detMap_x_U = new GetLocation_dm_detMap_x("dm_detMap_x_U");
    dm_detMap_x_U->clk(ap_clk);
    dm_detMap_x_U->reset(ap_rst);
    dm_detMap_x_U->address0(dm_detMap_x_address0);
    dm_detMap_x_U->ce0(dm_detMap_x_ce0);
    dm_detMap_x_U->q0(dm_detMap_x_q0);
    dm_detMap_y_U = new GetLocation_dm_detMap_y("dm_detMap_y_U");
    dm_detMap_y_U->clk(ap_clk);
    dm_detMap_y_U->reset(ap_rst);
    dm_detMap_y_U->address0(dm_detMap_y_address0);
    dm_detMap_y_U->ce0(dm_detMap_y_ce0);
    dm_detMap_y_U->q0(dm_detMap_y_q0);
    dm_detMap_module_U = new GetLocation_dm_detMap_module("dm_detMap_module_U");
    dm_detMap_module_U->clk(ap_clk);
    dm_detMap_module_U->reset(ap_rst);
    dm_detMap_module_U->address0(dm_detMap_module_address0);
    dm_detMap_module_U->ce0(dm_detMap_module_ce0);
    dm_detMap_module_U->q0(dm_detMap_module_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_agg_result_module);
    sensitive << ( dm_detMap_module_q0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_agg_result_module_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_agg_result_x);
    sensitive << ( dm_detMap_x_q0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_agg_result_x_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_agg_result_y);
    sensitive << ( dm_detMap_y_q0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_agg_result_y_ap_vld);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_sig_17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_69);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_17 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_69 );

    SC_METHOD(thread_dm_detMap_module_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( tmp_fu_92_p1 );

    SC_METHOD(thread_dm_detMap_module_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_dm_detMap_x_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( tmp_fu_92_p1 );

    SC_METHOD(thread_dm_detMap_x_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_dm_detMap_y_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( tmp_fu_92_p1 );

    SC_METHOD(thread_dm_detMap_y_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_tmp_fu_92_p1);
    sensitive << ( tdc_channel );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "GetLocation_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, agg_result_x, "(port)agg_result_x");
    sc_trace(mVcdFile, agg_result_x_ap_vld, "(port)agg_result_x_ap_vld");
    sc_trace(mVcdFile, agg_result_y, "(port)agg_result_y");
    sc_trace(mVcdFile, agg_result_y_ap_vld, "(port)agg_result_y_ap_vld");
    sc_trace(mVcdFile, agg_result_module, "(port)agg_result_module");
    sc_trace(mVcdFile, agg_result_module_ap_vld, "(port)agg_result_module_ap_vld");
    sc_trace(mVcdFile, tdc_channel, "(port)tdc_channel");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_17, "ap_sig_17");
    sc_trace(mVcdFile, dm_detMap_x_address0, "dm_detMap_x_address0");
    sc_trace(mVcdFile, dm_detMap_x_ce0, "dm_detMap_x_ce0");
    sc_trace(mVcdFile, dm_detMap_x_q0, "dm_detMap_x_q0");
    sc_trace(mVcdFile, dm_detMap_y_address0, "dm_detMap_y_address0");
    sc_trace(mVcdFile, dm_detMap_y_ce0, "dm_detMap_y_ce0");
    sc_trace(mVcdFile, dm_detMap_y_q0, "dm_detMap_y_q0");
    sc_trace(mVcdFile, dm_detMap_module_address0, "dm_detMap_module_address0");
    sc_trace(mVcdFile, dm_detMap_module_ce0, "dm_detMap_module_ce0");
    sc_trace(mVcdFile, dm_detMap_module_q0, "dm_detMap_module_q0");
    sc_trace(mVcdFile, tmp_fu_92_p1, "tmp_fu_92_p1");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_69, "ap_sig_69");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("GetLocation.hdltvin.dat");
    mHdltvoutHandle.open("GetLocation.hdltvout.dat");
}

GetLocation::~GetLocation() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dm_detMap_x_U;
    delete dm_detMap_y_U;
    delete dm_detMap_module_U;
}

void GetLocation::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void GetLocation::thread_agg_result_module() {
    agg_result_module = esl_zext<16,1>(dm_detMap_module_q0.read());
}

void GetLocation::thread_agg_result_module_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        agg_result_module_ap_vld = ap_const_logic_1;
    } else {
        agg_result_module_ap_vld = ap_const_logic_0;
    }
}

void GetLocation::thread_agg_result_x() {
    agg_result_x = esl_zext<16,8>(dm_detMap_x_q0.read());
}

void GetLocation::thread_agg_result_x_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        agg_result_x_ap_vld = ap_const_logic_1;
    } else {
        agg_result_x_ap_vld = ap_const_logic_0;
    }
}

void GetLocation::thread_agg_result_y() {
    agg_result_y = dm_detMap_y_q0.read();
}

void GetLocation::thread_agg_result_y_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        agg_result_y_ap_vld = ap_const_logic_1;
    } else {
        agg_result_y_ap_vld = ap_const_logic_0;
    }
}

void GetLocation::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void GetLocation::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void GetLocation::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void GetLocation::thread_ap_sig_17() {
    ap_sig_17 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void GetLocation::thread_ap_sig_69() {
    ap_sig_69 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void GetLocation::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_17.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void GetLocation::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_69.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void GetLocation::thread_dm_detMap_module_address0() {
    dm_detMap_module_address0 =  (sc_lv<7>) (tmp_fu_92_p1.read());
}

void GetLocation::thread_dm_detMap_module_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dm_detMap_module_ce0 = ap_const_logic_1;
    } else {
        dm_detMap_module_ce0 = ap_const_logic_0;
    }
}

void GetLocation::thread_dm_detMap_x_address0() {
    dm_detMap_x_address0 =  (sc_lv<7>) (tmp_fu_92_p1.read());
}

void GetLocation::thread_dm_detMap_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dm_detMap_x_ce0 = ap_const_logic_1;
    } else {
        dm_detMap_x_ce0 = ap_const_logic_0;
    }
}

void GetLocation::thread_dm_detMap_y_address0() {
    dm_detMap_y_address0 =  (sc_lv<7>) (tmp_fu_92_p1.read());
}

void GetLocation::thread_dm_detMap_y_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        dm_detMap_y_ce0 = ap_const_logic_1;
    } else {
        dm_detMap_y_ce0 = ap_const_logic_0;
    }
}

void GetLocation::thread_tmp_fu_92_p1() {
    tmp_fu_92_p1 = esl_sext<64,16>(tdc_channel.read());
}

void GetLocation::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void GetLocation::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_x\" :  \"" << agg_result_x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_x_ap_vld\" :  \"" << agg_result_x_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_y\" :  \"" << agg_result_y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_y_ap_vld\" :  \"" << agg_result_y_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_module\" :  \"" << agg_result_module.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"agg_result_module_ap_vld\" :  \"" << agg_result_module_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"tdc_channel\" :  \"" << tdc_channel.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

